/*
 * Author: CharSui
 * Created On: 2025.02.18
 * Description: 【代码借助Deepseek-r1生成】动态加载贴图进行放大缩小预览，
 *  This code generated by Deepseek-r1. Texture Previewer provides an editor window that allows zooming in to view the compressed texture style and modifying the background color to check the effects.
 */

using System;
using UnityEditor;
using UnityEngine;

namespace CharSui.TexturePreviewer
{
	public class TexturePreviewer : EditorWindow
	{
		#region 配置参数;Configuration

		private const float MinZoom = 0.1f;
		private const float MaxZoom = 4f;

		#endregion

		#region 运行时变量;runtime value

		private Texture2D _targetTex;
		private RenderTexture _rtCache;
		private Material _checkerMat;
		private string _lastTexturePath;
		private float _zoomLevel = 1f;
		private Color _backgroundColor = new Color(0.22f, 0.22f, 0.22f);
		private Vector2 _scrollPos;

		private int _grayInputValue = 128;
		
		#endregion

		[MenuItem("Window/Texture Previewer")]
		private static void Init()
		{
			GetWindow<TexturePreviewer>("Texture Previewer");
		}

		/// <summary>
		/// 公共调用接口;Public way to invoke
		/// </summary>
		/// <param name="resource"></param>
		public static void PreviewTexture(Texture resource)
		{
			var temp = GetWindow<TexturePreviewer>("Texture Viewer");
			temp.PrivatePreviewTexture(resource);
		}

		private void PrivatePreviewTexture(Texture resource)
		{
			_lastTexturePath = AssetDatabase.GetAssetPath(resource);
			LoadTexture(_lastTexturePath);
		}

		/// <summary>
		/// 监听Editor的焦点;Listen the editor event for [focusedWindow]
		/// </summary>
		private void OnEnable()
		{
			EditorApplication.update += OnEditorUpdate;
		}

		private void OnDisable()
		{
			EditorApplication.update -= OnEditorUpdate;
		}

		private void OnGUI()
		{
			HandleZoomEvent();
			DrawToolbar();
			DrawTextureArea();
		}

		private void OnDestroy()
		{
			ReleaseResources();
		}

		#region 核心逻辑;Core Logic

		private void HandleZoomEvent()
		{
			if (Event.current.type == EventType.ScrollWheel && _targetTex != null)
			{
				var relativePos = GetRelativeMousePosition();
				var delta = Event.current.delta.y * 0.05f;
				UpdateZoomLevel(delta, relativePos);
				Event.current.Use();
			}
		}

		private void UpdateZoomLevel(float delta, Vector2 anchorPoint)
		{
			var oldZoom = _zoomLevel;
			_zoomLevel = Mathf.Clamp(_zoomLevel * (1 - delta), MinZoom, MaxZoom);

			if (Mathf.Abs(oldZoom - _zoomLevel) > 0.01f)
			{
				var contentSize = new Vector2(
					_targetTex.width * _zoomLevel,
					_targetTex.height * _zoomLevel
				);
				_scrollPos = anchorPoint * contentSize - new Vector2(position.width * 0.5f, position.height * 0.5f);
				RefreshRenderTexture();
			}
		}

		#endregion

		#region 界面绘制;GUI Draw

		private void DrawToolbar()
		{
			using (new GUILayout.HorizontalScope(EditorStyles.toolbar, GUILayout.Height(20)))
			{
				DrawSelectionButton();
				DrawZoomControls();
				DrawBackgroundSelector();
				DrawFileInfo();
			}
		}

		private void DrawTextureArea()
		{
			var contentRect = new Rect(0, 20, position.width, position.height - 20);

			if (_targetTex != null && _rtCache != null)
			{
				DrawBackground(contentRect);
				DrawTextureWithScroll(contentRect);
			}
			else
			{
				DrawHelpBox(contentRect);
			}
		}

		private void DrawTextureWithScroll(Rect area)
		{
			try
			{
				_scrollPos = GUI.BeginScrollView(
					area,
					_scrollPos,
					new Rect(0, 0, _rtCache.width, _rtCache.height)
				);

				GUI.DrawTexture(new Rect(0, 0, _rtCache.width, _rtCache.height), _rtCache);
				GUI.EndScrollView();
			}
			catch (Exception e)
			{
				Debug.LogError($"Render failed: {e}");
				ReleaseResources();
			}
		}

		private void DrawHelpBox(Rect area)
		{
			EditorGUI.HelpBox(
				new Rect(area.x + 10, area.y + 20, area.width - 20, 40),
				"Select a texture in Project window and click the button",
				MessageType.Info
			);
		}

		#endregion

		#region 控件实现;GUI Layout element

		private void DrawSelectionButton()
		{
			if (GUILayout.Button("Select by FolderPanel", EditorStyles.toolbarButton, GUILayout.Width(150)))
			{
				var openFolderPath = string.IsNullOrEmpty(_lastTexturePath) ? "Assets/" : _lastTexturePath;

				var selected = EditorUtility.OpenFilePanel("选择需要预览的贴图", openFolderPath, "");

				_lastTexturePath = "Assets" + selected.Substring(Application.dataPath.Length);
				LoadTexture(_lastTexturePath);
			}

			if (GUILayout.Button("Select with Project", EditorStyles.toolbarButton, GUILayout.Width(120)))
			{
				var selected = Selection.activeObject as Texture2D;
				if (selected == null)
				{
					return;
				}

				_lastTexturePath = AssetDatabase.GetAssetPath(selected);
				LoadTexture(_lastTexturePath);
			}
		}

		private void DrawZoomControls()
		{
			GUILayout.Label("Zoom:", GUILayout.Width(40));
			var newZoom = GUILayout.HorizontalSlider(_zoomLevel, MinZoom, MaxZoom, GUILayout.Width(150));
			GUILayout.Label($"{_zoomLevel * 100:F0}%", GUILayout.Width(50));

			if (GUILayout.Button("Reset", EditorStyles.toolbarButton, GUILayout.Width(60)))
			{
				_zoomLevel = 1f;
				_scrollPos = Vector2.zero;
				RefreshRenderTexture();
				return;
			}

			if (Mathf.Abs(newZoom - _zoomLevel) > 0.01f)
			{
				_zoomLevel = newZoom;
				RefreshRenderTexture();
			}
		}

		private void DrawBackgroundSelector()
		{
			GUILayout.Label("Background:", GUILayout.Width(80));
			
			GUILayout.BeginHorizontal(GUILayout.Width(200));
			{
				_grayInputValue = EditorGUILayout.DelayedIntField(
					Mathf.RoundToInt(_grayInputValue),
					GUILayout.Width(40)
				);
				
				if (GUILayout.Button("Apply", EditorStyles.toolbarButton, GUILayout.Width(50)))
				{
					var gray = Mathf.Clamp01(_grayInputValue / 255f);
					_backgroundColor = new Color(gray, gray, gray);
				}
			}
			GUILayout.EndVertical();
		}

		

		private void DrawFileInfo()
		{
			if (_targetTex == null)
			{
				return;
			}

			GUILayout.FlexibleSpace();
			GUILayout.Label($"Size: {_targetTex.width}x{_targetTex.height}");
			GUILayout.Label($"Format: {_targetTex.format}", GUILayout.Width(150));
		}

		#endregion

		#region 功能方法;Common Feature

		private void LoadTexture(string path)
		{
			_targetTex = AssetDatabase.LoadAssetAtPath<Texture2D>(path);
			if (_targetTex != null)
			{
				RefreshRenderTexture();
			}
			else
			{
				Debug.LogError($"Failed to load texture: {path}");
				ReleaseResources();
			}
		}

		private void RefreshRenderTexture()
		{
			ReleaseResources();
			if (_targetTex == null)
			{
				return;
			}

			var renderWidth = Mathf.RoundToInt(_targetTex.width * _zoomLevel);
			var renderHeight = Mathf.RoundToInt(_targetTex.height * _zoomLevel);

			_rtCache = RenderTexture.GetTemporary(
				renderWidth,
				renderHeight,
				0,
				RenderTextureFormat.ARGB32
			);
			Graphics.Blit(_targetTex, _rtCache);
		}

		private void DrawBackground(Rect area)
		{
			EditorGUI.DrawRect(area, _backgroundColor);
		}

		private Vector2 GetRelativeMousePosition()
		{
			var mousePos = Event.current.mousePosition - new Vector2(0, 20);
			return new Vector2(
				Mathf.Clamp01((mousePos.x + _scrollPos.x) / (_targetTex.width * _zoomLevel)),
				Mathf.Clamp01((mousePos.y + _scrollPos.y) / (_targetTex.height * _zoomLevel))
			);
		}

		#endregion

		#region 资源管理;Resources Management

		private void ReleaseResources()
		{
			if (_rtCache != null)
			{
				RenderTexture.ReleaseTemporary(_rtCache);
				_rtCache = null;
			}

			if (_checkerMat != null)
			{
				DestroyImmediate(_checkerMat);
				_checkerMat = null;
			}
		}

		private void OnEditorUpdate()
		{
			if (focusedWindow != this || string.IsNullOrEmpty(_lastTexturePath))
			{
				return;
			}
			
			LoadTexture(_lastTexturePath);
		}

		#endregion
	}
}
